{"version":3,"sources":["Components/SeachBox.js","Components/App.js","serviceWorker.js","index.js"],"names":["SearchBox","state","term","onInputChange","event","_this","setState","target","value","onFormSubmit","preventDefault","props","fetchNews","concat","react_default","a","createElement","onSubmit","this","className","input","placeholder","onChange","es_button","type","htmlType","Component","App","news","url","arguments","length","undefined","axios","get","then","response","data","articles","catch","error","console","newsItems","map","item","href","rel","title","SeachBox","list","bordered","dataSource","renderItem","Item","Boolean","window","location","hostname","match","ReactDOM","render","Components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAoCeA,6MAhCbC,MAAQ,CAAEC,KAAM,MAEhBC,cAAgB,SAAAC,GACdC,EAAKC,SAAS,CAAEJ,KAAME,EAAMG,OAAOC,WAGrCC,aAAe,SAAAL,GACbA,EAAMM,iBACkB,KAApBL,EAAKJ,MAAMC,MACbG,EAAKM,MAAMC,UAAX,wBAAAC,OAA6CR,EAAKJ,MAAMC,OAG1DG,EAAKC,SAAS,CAAEJ,KAAM,8EAItB,OACEY,EAAAC,EAAAC,cAAA,QAAMC,SAAUC,KAAKT,aAAcU,UAAU,0BAC3CL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACEC,YAAY,2BACZb,MAAOU,KAAKjB,MAAMC,KAClBoB,SAAUJ,KAAKf,cACfgB,UAAU,WAEZL,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAQC,KAAK,UAAUC,SAAS,UAAhC,kBAzBgBC,sBCmCTC,6MA9Bb1B,MAAQ,CAAE2B,KAAM,MAKhBhB,UAAY,WAA6B,IAA5BiB,EAA4BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtB,kBACjBG,IAAMC,IAAIL,GAAKM,KAAK,SAAAC,GAClB/B,EAAKC,SAAS,CAAEsB,KAAMQ,EAASC,KAAKC,aACnCC,MAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,yFALhCtB,KAAKN,6CASL,IAAM8B,EAAYxB,KAAKjB,MAAM2B,KAAKe,IAAI,SAAAC,GAAI,OACxC9B,EAAAC,EAAAC,cAAA,KAAG6B,KAAMD,EAAKf,IAAKiB,IAAI,WAAWvC,OAAO,UACtCqC,EAAKG,SAGV,OACEjC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACgC,EAAD,CAAWpC,UAAWM,KAAKN,YAC3BE,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CACEC,UAAQ,EACRC,WAAYT,EACZU,WAAY,SAAAR,GAAI,OAAI9B,EAAAC,EAAAC,cAACiC,EAAA,EAAKI,KAAN,KAAYT,cAxBxBlB,aCKE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.e1bdfb1f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Input, Button } from \"antd\";\n\nclass SearchBox extends Component {\n  state = { term: \"\" };\n\n  onInputChange = event => {\n    this.setState({ term: event.target.value });\n  };\n\n  onFormSubmit = event => {\n    event.preventDefault();\n    if (this.state.term !== \"\") {\n      this.props.fetchNews(`/news/filtered?query=${this.state.term}`);\n    }\n\n    this.setState({ term: \"\" });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.onFormSubmit} className=\"search-box input-group\">\n        <Input\n          placeholder=\"type something to search\"\n          value={this.state.term}\n          onChange={this.onInputChange}\n          className=\"search\"\n        />\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </form>\n    );\n  }\n}\n\nexport default SearchBox;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport \"../App.css\";\nimport SearchBox from \"./SeachBox\";\nimport { List } from \"antd\";\n\nclass App extends Component {\n  state = { news: [] };\n\n  componentDidMount() {\n    this.fetchNews();\n  }\n  fetchNews = (url = \"/news/headlines\") => {\n    axios.get(url).then(response => {\n      this.setState({ news: response.data.articles });\n    }).catch(error => console.error(error));\n  };\n\n  render() {\n    const newsItems = this.state.news.map(item => (\n      <a href={item.url} rel=\"external\" target=\"_blank\">\n        {item.title}\n      </a>\n    ));\n    return (\n      <div className=\"App\">\n        <SearchBox fetchNews={this.fetchNews} />\n        <List\n          bordered\n          dataSource={newsItems}\n          renderItem={item => <List.Item>{item}</List.Item>}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}